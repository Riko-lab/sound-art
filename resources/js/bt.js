
var form = document.querySelector('#payment-form');
var submit = document.querySelector('input[type="submit"]'); // ! QUESTO Ãˆ SBAGLIATO !

braintree.client.create({
	// Insert your tokenization key here
	authorization: '{{ $token }}'
}, function (clientErr, clientInstance) {
	if (clientErr) {
		console.log('error1');
		console.error(clientErr);
		return;
	}
	// This example shows Hosted Fields, but you can also use this
	// client instance to create additional components here, such as
	// PayPal or Data Collector.

	// Create a hostedFields component to initialize the form
	braintree.hostedFields.create({
		client: clientInstance,
		styles: {
			'input': {
				'font-size': '14px'
			},
			'input.invalid': {
				'color': 'red'
			},
			'input.valid': {
				'color': 'green'
			}
		},
		// Configure which fields in your card form will be generated by Hosted Fields instead
		  fields: {
			number: {
				selector: '#card-number',
				placeholder: '4242 4242 4242 4242',
				attribute: 'aria-required',
			},
			cvv: {
				selector: '#cvv',
				placeholder: '123'
			},
			expirationDate: {
				selector: '#expiration-date',
				placeholder: '12/22'
			}
		}
	}, 
	function (hostedFieldsErr, hostedFieldsInstance) {
		if (hostedFieldsErr) {
			console.log('error2');
			console.error(hostedFieldsErr);
			return;
		}

		// Once the fields are initialized enable the submit button
		// submit.removeAttribute('disabled');

		// Initialize the form submit event
		form.addEventListener('submit', function (event) {
			event.preventDefault();

			// When the user clicks on the 'Submit payment' button this code will send the
			// encrypted payment information in a variable called a payment method nonce
			hostedFieldsInstance.tokenize(function (tokenizeErr, payload) {
				if (tokenizeErr) {
					console.log('error3');
					console.error(tokenizeErr);
					return;
				}
				// If this was a real integration, this is where you would
				// send the nonce to your server.
				// console.log('Got a nonce: ' + payload.nonce);
				document.querySelector('#nonce').value = payload.nonce;
				form.submit();
			});
		}, false);
	});
	// Create a PayPal Checkout component.
	braintree.paypalCheckout.create({
		client: clientInstance
	}, 
	function (paypalCheckoutErr, paypalCheckoutInstance) {
		// Stop if there was a problem creating PayPal Checkout.
		// This could happen if there was a network error or if it's incorrectly
		// configured.
		if (paypalCheckoutErr) {
			console.error('Error creating PayPal Checkout:', paypalCheckoutErr);
			return;
		}
		// Set up PayPal with the checkout.js library
		paypal.Button.render({
			env: 'sandbox', // or 'production'
			commit: true,
			payment: function () {
				return paypalCheckoutInstance.createPayment({
					// Your PayPal options here. For available options, see
					// http://braintree.github.io/braintree-web/current/PayPalCheckout.html#createPayment
					flow: 'checkout', // Required
					amount: 13.00, // Required
					currency: 'USD', // Required
				});
			},
			onAuthorize: function (data, actions) {
				return paypalCheckoutInstance.tokenizePayment(data, function (err, payload) {
					// Submit `payload.nonce` to your server.
					document.querySelector('#nonce').value = payload.nonce;
					form.submit();
				});
			},
			onCancel: function (data) {
				console.log('checkout.js payment cancelled', JSON.stringify(data, 0, 2));
			},
			onError: function (err) {
				console.error('checkout.js error', err);
			}
		}, 
		'#paypal-button').then(function () {
			// The PayPal button will be rendered in an html element with the id
			// `paypal-button`. This function will be called when the PayPal button
			// is set up and ready to be used.
		});
	});
});
