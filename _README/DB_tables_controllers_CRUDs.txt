% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% %
%                      SEED DATABASE - FINALE                        %
% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% %

--------------------------- seed INTERO database (SingleProfileSeeder)

1. svuotamento db_sound_art (scatola rimane)

2. aggiornamento risorse 
	/database/migrations/				>> 	/_DB/migrations_backup/ 			[14 file]
	/database/seeds/					>> 	/_DB/seeds_people_backup/ 			[1x DatabaseSeeder.php, 4x {Tag}Seeder.php, 60x SingleProfileSeeder{N}.php]
	/storage/app/public/profile_image/ 	>> 	/_DB/storage_profile_image_backup/	[60 immagini]

3. controllo DatabaseSeeder.php [attivare 64 seeder]

4. php artisan migrate

5. composer dump-autoload

6. php artisan db:seed

----------------------------------------------------------------------

% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% %
%                       PRESENTAZIONE PROGETTO                       %
% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% %


# UNIVERSO ESPANSO #

INGREDIENTI DEL DISCORSO (cose che vanno sapute così)

*secnario di mercato
	problemi
		dispersione domanda e offerta di professionalità musicale 
	bisogni
		domanda 
			trovare efficacemente professionisti
		offerta
			professionisti affermati ed emergenti che cercano visibilità
			visibilità sia ad ampio raggio che mirata 
	contesti cominicativi
		canali tradizionali offline
		canali tradizionali online (Youtube, ...)
		canale web innovativo >> marketpalce web >> quello che offriamo noi!
	soluzione
		spazio web per unire efficacemente e dinamicamente domanda e offerta
		fruibile da tutti i dispositivi

*marketplace (definizione del progetto)
	unisce domanda e offerta nell'industria musicale
	altre cose da sapere ...................

*ospite (ex guest)
	accede al sito in cerca di prestazioni professionali di qualità

*professionista (ex admin)
	si iscrive alla piattaforma per essere visibile mostrando la propria REPUTAZIONE!! (stelle/review)
	ha la possibilità di essere in evidenza tra gli altri

*business model
	maggiore visibilità ai professionisti che comprano sponsorship
	sponsorchip di varia durata e tariffa


# ELEVATOR PICH # 

*PRELIMINARI

preparare su DB
	10 sponsorhip attive (ultima creazione DB mattina 30 giugno)
	[Mirela Nita] no sponsorship attiva!! (nel suo seeder: $is_active_contract = 0;)

preparare su pc 
	1 finestra browser con utente NON loggato (per es. incognito)
	1 finestra browser con utente loggato [Mirela Nita]

*INTRODUZIONE {30 sec}

	due parole alla luce dell'universo espanso:
		abbiamo soddisfatto una importante esigenza di mercato
		fare incontrare domanda e offerta nell'industria musicale (mission)
		MARKETPLACE web che risolve alla grande il bisogno di mercato

*HOME PAGE [OSPITE] {3 min}

	inizio pagina:
		lasciamo vedere senza sottolienare, da jumbo fino a testo dinamico
		(tenere in view testo dinamico)

	gliglia profili: 
		significato in evidenza: accennare
	card: 
		sommariamente categorie, REPUTAZIONE, offerta

	resto: 
		rapidamente scorrere fino al footer
		pulsante more: usare!

	responsiveness: 
		citare e mostrare

*SEARCH [OSPITE] {3 min}

	prima ricerca semplice:
		categore o generi
		eseguire ricerca per categoria : singer || producer || guitarist || 
		eseguire ricerca per genere    : chill 

	atterraggio in search
		perfezinamento ricerca: chill || singer
		altri 2 campi filtro: citare e mostrare voto e # review (# review compreso tra 15 e 25)

	aprire tutto fino a mostrare NON sponsorhip
	andare a cercare profilo [Mirela Nita]

*PROFILO [OSPITE] {3 min}

	scelta singolo profilo [Mirela Nita]
		mostrare bio, review
		mostrare servizi offerti, generi musicali pro
		pulsante scrivi messaggio: inviare messaggio minimale [Mirela Nita]
		pulsante scrivi review	 : inviare review minimale [Mirela Nita]
		link reviews: andare a vedere e tornare su con freccina

	tornare in home page tramite Logo

* DASHBOARD [PROFESSIONISTA] {3 min}

	registrazione: citare solamente 
	login: entrare [Mirela Nita]

	dashboard [Mirela Nita]
		menzionare presenza funzionalità in più
		link messages: vedere messaggio appena ricevuto e cancellare
		link reviews: vedere review appena ricevuta
		pulsante edit profilo: aprire pagine edit e tornare indietro
		pulsante delete profilo: citare sommariamente possibilità (aprire e chidere modal)

	resto in dashboard [Mirela Nita]
	
* DASHBOARD STATISTICS [PROFESSIONISTA] {1 min}

	link statistics [Mirela Nita]:
		mostrare grafici e commentare

	resto in dashboard [Mirela Nita]

* SPONSORHIP [PROFESSIONISTA] {3 min}

	sono in dashboard [Mirela Nita]

	pulsante sponsorizza: mostrare le possibilità di acquisto
	pulsante buy: mostrare procedura transazione fino a submit
	link sponsorships: mostrare attiva e passate

	tornare su home page da ospite
	mostrare [Mirela Nita] in terza riga
	ultimare spiegazione profili in evidenza

****************************** {TOTLE 15 imn}




























% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% %
%            ELENCO TABLE + MODEL + RELAZIONI + ipotesi CRUD         %
% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% %

TABLE			MODEL / MIGRATIONS

				User 
users			create_users_tabe
				///////////////////////////////////////////////////////////
				ramo PROFILE
					profile() 	{ return $this->hasOne('App\Profile'); }
				ramo TAG
					categories(){ return $this->belongsToMany('App\Category'); }
					genres() 	{ return $this->belongsToMany('App\Genre'); }
					offers() 	{ return $this->belongsToMany('App\Offer'); }
				ramo FEEDBACK
					reviews()	{ return $this->hasMany('App\Review') }
					messages()	{ return $this->hasMany('App\Message') }
				ramo SPONSORSHIP
					contracts() { return $this->hasMany('App\Contract'); }
				///////////////////////////////////////////////////////////
				!CRUD: NO!
					utente registrato: dettaglio solo SE STESSO quando vede profilo

				Profile
profiles		create_profiles_table
				fk: user_id (***)
				///////////////////////////////////////////////////////////
				user()	 	{ return $this->belongsTo('App\User'); }
				///////////////////////////////////////////////////////////
				*CRUD: YES* 
					utente registrato: elenco, dettaglio, crea, modifica, delete
					Controllers/Admin/ProfileController

				Review
reviews			create_reviews_table
				///////////////////////////////////////////////////////////
				user() { return $this->belongsTo('App\User'); }
				///////////////////////////////////////////////////////////
				*CRUD: YES*
					solo create/store per guest e admin
					Controllers/ReviewController@create

				Message
messages		create_messages_table
				///////////////////////////////////////////////////////////
				user() { return $this->belongsTo('App\User'); }
				///////////////////////////////////////////////////////////
				*CRUD: YES*
					solo create/store per guest e admin
					Controllers/MessageController@create

				Category
categories		create_categories_table
user_category	create_user_category_table
				///////////////////////////////////////////////////////////
				users()		{ return $this->belongsToMany('App\User'); }
				///////////////////////////////////////////////////////////
				!CRUD: NO!
					utente registrato non tocca (accesso solo sviluppatori)

				Genre
genres			create_genres_table
user_genre		create_user_genre_table
				///////////////////////////////////////////////////////////
				users()	{ return $this->belongsToMany('App\User'); }
				///////////////////////////////////////////////////////////
				!CRUD: NO!
					utente registrato non tocca (accesso solo sviluppatori)

				Offer
offers			create_offers_table
user_offer		create_user_offer_table
				///////////////////////////////////////////////////////////
				users()	{ return $this->belongsToMany('App\User'); }
				///////////////////////////////////////////////////////////
				!CRUD: NO!
					utente registrato non tocca (accesso solo sviluppatori)

				Contract
contracts		create_contracts_table
				///////////////////////////////////////////////////////////
				user()			{ return $this->belongsTo('App\User'); }
				sponsorship()	{ return $this->belongsTo('App\Sponsorship'); }
				///////////////////////////////////////////////////////////
				*CRUD: YES*
					solo create/store per admin
					Controllers/Admin/ContractController

				Sponsorship
sponsorships	create_sponsorships_table
				///////////////////////////////////////////////////////////
				contracts()	{ return $this->hasMany('App\Contract'); }
				///////////////////////////////////////////////////////////
				*CRUD: YES* 
					solo index mostra elenco prodotti (no show)
					Controllers/Admin/SponsorshipController


relazioni tra tabelle, vedi:
https://laravel.com/docs/8.x/eloquent-relationships#one-to-one

(***) 
relazione 1-1 users-profiles, separiamo id profile da user_id 
-------------------------------------------------------------------
	Schema::create('profiles', function (Blueprint $table) {

		$table->id();
		$table->foreign('user_id')->references('id')->on('users');

	});
------------------------------------------------------------------


% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% %
%       ELENCO MODEL + GUEST/ADMIN CONTROLLER + CRUD moethods        %
% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% %

				GUEST			 		ADMIN

User			N.A. 					N.A.

Profile			ProfileController 		Admin/ProfileController SOLO SE STESSO
				search(index)			index 		(non è la dashboard: NON SERVE!)
				search_from_home(index)	show		(dettaglio profilo per admin: NON SERVE!)
				show					create 		(form vuoto)
										store
										edit 		(form compilato da Profile)
										update
										delete 		(pulsante messo da qualche parte...?)

Message 		MessageController		Admin/MessageController
				create					index
				store					show
										delete

Review			ReviewController 		Admin/ReviewController
				create					index
				store					show

Category		N.A. 					N.A. 				(il dato è manipolato solo dallo svipuppatore)

Genre			N.A. 					N.A. 				(il dato è manipolato solo dallo svipuppatore)

Offer			N.A. 					N.A. 				(il dato è manipolato solo dallo svipuppatore)

Contract		N.A. 					Admin/ContractController
										create
										store

Sponsorship		N.A. 					Admin/SponsorshipController
										index
										show

! DELLE TABELLE PONTE NON CI SONO MODEL/CONTROLLER, MA CI SONO MIGRATION !


% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% %
%   CREAZIONE MODEL + MIGRATION + SEEDER + GUEST/ADMIN CONTROLLER    %
% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% %

---------------------------------------- tabelle con CRUD più completa

1. Profile 

php artisan make:model Profile -rcms
*Profile
*create_profiles_table
*ProfileSeeder
*ProfileController
php artisan make:controller Admin/ProfileController
*/Admin/ProfileController

2. Message 

php artisan make:model Message -rcms
*Message
*create_messages_table
*MessageSeeder
*MessageController
php artisan make:controller Admin/MessageController
*/Admin/MessageController

2. Review

php artisan make:model Review -rcms
*Review
*create_reviews_table
*ReviewSeeder
*ReviewController
php artisan make:controller Admin/ReviewController
*/Admin/ReviewController

---------------------------------------- tabelle TAG + ponte | NO CRUD

3. Category

php artisan make:model Category -ms
*Category
*create_categories_table
*CategorySeeder

4. Genre

php artisan make:model Genre -ms
*Genre
*create_genres_table
*GenreSeeder

5. Offer

php artisan make:model Offer -ms
*Offer
*create_offers_table
*OfferSeeder

6. User-Category 

php artisan make:migration create_user_category_table
*create_user_category_table

7. User-Genre

php artisan make:migration create_user_genre_table
*create_user_genre_table

8. User-Offer

php artisan make:migration create_user_offer_table
*create_user_offer_table

-------------------------------------------- ramo sponsorship con CRUD

9. Sponsorship

php artisan make:model Sponsorship -rcms
*Sponsorship
*create_sponsorships_table
*SponsorshipSeeder
*DELETE_SponsorshipController > DELETE !
php artisan make:controller Admin/SponsorshipController
*/Admin/SponsorshipController

10. Contract

php artisan make:model Contract -rcms
*Contract
*create_contracts_table
*ContractSeeder
*DELETE_ContractController > DELETE !
php artisan make:controller Admin/ContractController
*/Admin/ContractController

----------------------------------------------------------------------

% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% %
%                            SEED DATABASE                           %
% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% %

------------------------------------------ popolamento singola tabella

1. php artisan make:seeder XXXSeeder
*crea seeder
2. compilazione XXXSeeder
3. php artisan db:seed --class=XXXSeeder
*popola tabella

-------------------------------------------------- popolamento tabelle

1. preprazione dei seeder
2. compilazione DatabaseSeeder.php
3. composer dump-autoload (se serve)
4. php artisan db:seed 

------------------------------------------------- seed INTERO database

1. svuotamento db_sound_art (scatola rimane)
2. aggiornamento /migrations/ >> /migrations_backup/ (14 file)
3. aggiornamento /seeds/ >> /seeds_backup/ (13 file, di cui uno inutile "DRAFT_")
4. php artisan migrate
5. composer dump-autoload
6. php artisan db:seed

------------------------------------- seed INTERO database + BRAINTREE

1. svuotamento db_sound_art (scatola rimane)
2. aggiornamento /migrations/ >> /migrations_backup/ (14 file)
3. aggiornamento /seeds/ >> /seeds_backup/ (13 file, di cui uno inutile "DRAFT_")
4. php artisan migrate
5. composer dump-autoload
6. php artisan db:seed
7. aggiornamento .env, aggiunta righe
	BT_ENVIRONMENT=sandbox
	BT_MERCHANT_ID=ct6s84gcw9cmkv8y
	BT_PUBLIC_KEY=6kb2fp2f64c886gk
	BT_PRIVATE_KEY=6c65a8532a3d982fe758048074e17dcf
9. aggiornamento config/services.php, aggiunta righe (occhio alle parentesi)
    'braintree' => [
		'environment' => env('BT_ENVIRONMENT'),
		'merchantId' => env('BT_MERCHANT_ID'),
		'publicKey' => env('BT_PUBLIC_KEY'),
		'privateKey' => env('BT_PRIVATE_KEY'),		
    ],
10. composer require braintree/braintree_php



% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% %
%                           CRUD PROGRESS                            %
% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% %


* profiles: fatte

! messages: da fare

! reviews: da fare

? contracts: in corso...

* sponsorships: fatte


% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% %
%                           API DI SERVIZIO                          %
% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% %

---------------------------------------------------------------- rotte

php artisan make:controller Api/ProfileController
*Api/ProfileController >> controller per i profile via API

------------------------------ axios per ricerca - risultato in uscita

  0 => array:13 [
    "id" => 1
    "user_id" => 1
    "slug" => "loredana-venditti"
    "work_town" => "Firenze"
    "bio_text4" => "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua."
    "image_url" => "profile_image/image_placeholder.jpg"
    "name" => "Loredana"
    "surname" => "Venditti"
    "categories" => array:2 [
      0 => "Drummer"
      1 => "Classical Guitarist"
    ]
    "genres" => array:3 [
      0 => "Metal"
      1 => "Folk"
      2 => "Reggaeton"
    ]
    "offers" => array:1 [
      0 => "Recording"
    ]
    "average_vote" => 3.8
    "rev_count" => 5
  ]





























% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% %
%      ELENCO VIEW con contenuti e funzioni ~ ~ ~ OBSOLETO ~ ~ ~     %
% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% %

# GUEST or ADMIN HOME                    
# /views/home.blade.php                  

	home per tutti
	simple search
	vista sponsorships
	altro?

# ADMIN DASHBOARD                        
# /views/admin/dashboard.blade.ph        

	pulsante: 
		vedi/modifica tuo profilo > [ProfileController@show]
		crea profilo > [Admin/ProfileController@create]
	pulsante:
		fai la sponsorship > [sponsorship.blade.php]
	vedi i messaggi > [MessageController@index]
	vedi i review > [ReviewController@index]
	statistiche		
	altre funzioni quali?

# ADMIN SPONSORSHIP                      
# /views/admin/sponsorship.blade.php     

	SponsorshipController@index > tendina > scelgo
	pulsante submit	(tendina scelta) 
	API
		????
	>>> DB contracts
		 user_id,
		 sponsoship_id,
		 data now,
		 data end, 
		 successo transazione 
		 scelta, 

# GUEST or ADMIN ADVANCED SEARCH PRFILE  
# /views/guest/profiles/search.blade.php 
# /views/guest/profiles/index.blade.php  

	equivale a index.blade.php

# GUEST or ADMIN SHOW PROFILE            
# /views/guest/profiles/show.blade.php   

	vedo tutti i dettagli con CV, solo vista

	____
	{ GUEST OR ADMIN } AND { ID != SE STESSO }
		pulsante:
			manda un messaggio > [MessageController@create]
			>>> VORREMMO NON APRIRE UN'ALTRA VIEW <<<
		pulsante:
			fai una recensione > [ReviewController@create]
			>>> VORREMMO NON APRIRE UN'ALTRA VIEW <<<
	_____
	{ SOLO ADMIN } AND { ID = STESSO }
		pulsante:
			modifica tuo profilo > [Admin/ProfileController@edit]
	

